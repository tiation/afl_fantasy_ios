//
//  SimpleAFLFantasyApp.swift
//  AFL Fantasy Intelligence Platform
//
//  Simple working version with enhanced data
//  Created by AI Assistant on 6/9/2025.
//

import SwiftUI
import UserNotifications

// MARK: - AFLFantasyApp

@main
struct AFLFantasyApp: App {
    @StateObject private var appState = AppState()
    @StateObject private var dataService = AFLFantasyDataService()
    @StateObject private var toolsClient = AFLFantasyToolsClient()

    var body: some Scene {
        WindowGroup {
            SimpleContentView()
                .environmentObject(appState)
                .environmentObject(dataService)
                .environmentObject(toolsClient)
                .preferredColorScheme(.dark)
        }
    }
}

// MARK: - AppState

@MainActor
class AppState: ObservableObject {
    @Published var selectedTab: TabItem = .dashboard
    @Published var teamScore: Int = 1987
    @Published var teamRank: Int = 5432
    @Published var players: [EnhancedPlayer] = []
    @Published var captainSuggestions: [CaptainSuggestion] = []
    @Published var cashCows: [EnhancedPlayer] = []

    // Trade management
    @Published var tradesUsed: Int = 2
    @Published var tradesRemaining: Int = 8
    @Published var tradeHistory: [TradeRecord] = []

    // Team financials
    @Published var teamValue: Int = 12_000_000
    @Published var bankBalance: Int = 300_000

    // Connection and sync
    @Published var isRefreshing: Bool = false
    @Published var lastUpdateTime: Date? = Date()
    @Published var errorMessage: String?

    init() {
        loadEnhancedData()
        generateCaptainSuggestions()
    }

    private func loadEnhancedData() {
        players = createSamplePlayers()
        cashCows = players.filter(\.isCashCow)
    }

    private func createSamplePlayers() -> [EnhancedPlayer] {
        let samplePlayers = [
            createPremiumMidfielder(),
            createPremiumRuck(),
            createConsistentMidfielder(),
            createCashCowDefender(),
            createContractYearMidfielder()
        ]
        return samplePlayers
    }

    private func createPremiumMidfielder() -> EnhancedPlayer {
        EnhancedPlayer(
            name: "Marcus Bontempelli",
            position: .midfielder,
            currentPrice: 850_000,
            currentScore: 125,
            averageScore: 118.5,
            breakeven: 85,
            consistency: 92.0,
            injuryRiskScore: 15.0,
            priceChange: 25000,
            cashGenerated: 0,
            isCashCow: false,
            teamAbbreviation: "WBD",
            projectedScore: 130.0,
            opponent: "Richmond",
            venue: "Marvel Stadium",
            rainProbability: 0.2,
            venueBias: 3.5,
            isDoubtful: false,
            contractYear: false,
            gamesPlayed: 10
        )
    }

    private func createPremiumRuck() -> EnhancedPlayer {
        EnhancedPlayer(
            name: "Max Gawn",
            position: .ruck,
            currentPrice: 780_000,
            currentScore: 98,
            averageScore: 105.2,
            breakeven: 90,
            consistency: 88.0,
            injuryRiskScore: 35.0,
            priceChange: -15000,
            cashGenerated: 0,
            isCashCow: false,
            teamAbbreviation: "MEL",
            projectedScore: 105.0,
            opponent: "Collingwood",
            venue: "MCG",
            rainProbability: 0.1,
            venueBias: 2.0,
            isDoubtful: true,
            contractYear: false,
            gamesPlayed: 9
        )
    }

    private func createConsistentMidfielder() -> EnhancedPlayer {
        EnhancedPlayer(
            name: "Touk Miller",
            position: .midfielder,
            currentPrice: 720_000,
            currentScore: 110,
            averageScore: 108.8,
            breakeven: 75,
            consistency: 89.0,
            injuryRiskScore: 12.0,
            priceChange: 20000,
            cashGenerated: 0,
            isCashCow: false,
            teamAbbreviation: "GCS",
            projectedScore: 115.0,
            opponent: "Geelong",
            venue: "GMHBA Stadium",
            rainProbability: 0.4,
            venueBias: -1.5,
            isDoubtful: false,
            contractYear: true,
            gamesPlayed: 10
        )
    }

    private func createCashCowDefender() -> EnhancedPlayer {
        EnhancedPlayer(
            name: "Hayden Young",
            position: .defender,
            currentPrice: 550_000,
            currentScore: 78,
            averageScore: 85.2,
            breakeven: 45,
            consistency: 76.0,
            injuryRiskScore: 14.0,
            priceChange: 35000,
            cashGenerated: 120_000,
            isCashCow: true,
            teamAbbreviation: "FRE",
            projectedScore: 88.0,
            opponent: "Sydney",
            venue: "Optus Stadium",
            rainProbability: 0.0,
            venueBias: 4.2,
            isDoubtful: false,
            contractYear: false,
            gamesPlayed: 8
        )
    }

    private func createContractYearMidfielder() -> EnhancedPlayer {
        EnhancedPlayer(
            name: "Sam Walsh",
            position: .midfielder,
            currentPrice: 750_000,
            currentScore: 115,
            averageScore: 112.4,
            breakeven: 80,
            consistency: 87.0,
            injuryRiskScore: 18.0,
            priceChange: 30000,
            cashGenerated: 0,
            isCashCow: false,
            teamAbbreviation: "CAR",
            projectedScore: 118.0,
            opponent: "Hawthorn",
            venue: "MCG",
            rainProbability: 0.3,
            venueBias: 1.8,
            isDoubtful: false,
            contractYear: true,
            gamesPlayed: 10
        )
    }

    private func generateCaptainSuggestions() {
        let topPlayers = players.sorted { $0.averageScore > $1.averageScore }.prefix(3)

        captainSuggestions = topPlayers.enumerated().map { index, player in
            let confidence = Int(90 - Double(index) * 5 + player.consistency * 0.1)
            let projectedPoints = Int(player.projectedScore * 2 + Double.random(in: -10 ... 10))

            return CaptainSuggestion(
                player: player,
                confidence: confidence,
                projectedPoints: projectedPoints
            )
        }
    }

    // MARK: - Public Methods

    func refreshData() {
        Task {
            await MainActor.run {
                isRefreshing = true
                errorMessage = nil
            }

            // Simulate API call
            try? await Task.sleep(nanoseconds: 2_000_000_000)

            await MainActor.run {
                isRefreshing = false
                lastUpdateTime = Date()

                // Update some sample data
                teamScore = Int.random(in: 1800 ... 2200)
                teamRank = Int.random(in: 1000 ... 15000)
            }
        }
    }

    func simulateError(_ message: String) {
        errorMessage = message
    }

    func clearError() {
        errorMessage = nil
    }
}

// MARK: - EnhancedPlayer

struct EnhancedPlayer: Identifiable, Codable {
    let id = UUID()
    let name: String
    let position: Position
    let currentPrice: Int
    let currentScore: Int
    let averageScore: Double
    let breakeven: Int
    let consistency: Double
    let injuryRiskScore: Double
    let priceChange: Int
    let cashGenerated: Int
    let isCashCow: Bool
    let teamAbbreviation: String
    let projectedScore: Double
    let opponent: String
    let venue: String
    let rainProbability: Double
    let venueBias: Double
    let isDoubtful: Bool
    let contractYear: Bool
    let gamesPlayed: Int

    var formattedPrice: String {
        "$\(currentPrice / 1000)k"
    }

    var priceChangeText: String {
        let prefix = priceChange >= 0 ? "+" : ""
        return "\(prefix)\(priceChange / 1000)k"
    }

    var consistencyGrade: String {
        switch consistency {
        case 90...: "A+"
        case 80 ..< 90: "A"
        case 70 ..< 80: "B"
        case 60 ..< 70: "C"
        default: "D"
        }
    }

    var injuryRiskLevel: String {
        switch injuryRiskScore {
        case 0 ..< 15: "Low"
        case 15 ..< 30: "Moderate"
        case 30 ..< 60: "High"
        default: "Extreme"
        }
    }

    var injuryRiskColor: Color {
        switch injuryRiskScore {
        case 0 ..< 15: .green
        case 15 ..< 30: .yellow
        case 30 ..< 60: .orange
        default: .red
        }
    }
}

// MARK: - CaptainSuggestion

struct CaptainSuggestion: Identifiable {
    let id = UUID()
    let player: EnhancedPlayer
    let confidence: Int
    let projectedPoints: Int
}

// MARK: - Position

enum Position: String, CaseIterable, Codable {
    case defender = "DEF"
    case midfielder = "MID"
    case ruck = "RUC"
    case forward = "FWD"

    var color: Color {
        switch self {
        case .defender: .blue
        case .midfielder: .green
        case .ruck: .purple
        case .forward: .red
        }
    }
}

// MARK: - TabItem

enum TabItem: String, CaseIterable {
    case dashboard = "Dashboard"
    case captain = "Captain"
    case trades = "Trades"
    case cashCow = "Cash Cow"
    case settings = "Settings"

    var systemImage: String {
        switch self {
        case .dashboard: "chart.line.uptrend.xyaxis"
        case .captain: "star.fill"
        case .trades: "arrow.triangle.2.circlepath"
        case .cashCow: "dollarsign.circle.fill"
        case .settings: "gearshape.fill"
        }
    }
}

// MARK: - TradeRecord

struct TradeRecord: Identifiable, Codable {
    let id = UUID()
    let playerOut: EnhancedPlayer
    let playerIn: EnhancedPlayer
    let executedAt: Date
    let netCost: Int
    let projectedImpact: Double
}

// MARK: - AFLFantasyDataService

@MainActor
class AFLFantasyDataService: ObservableObject {
    @Published var authenticated: Bool = false
    @Published var loading: Bool = false
    @Published var isLoading: Bool = false
    @Published var hasError: Bool = false
    @Published var errorMessage: String?
    @Published var currentDashboardData: DashboardData?
    @Published var currentCaptain: CaptainData.Captain?
    @Published var isCacheFresh: Bool = true
    @Published var lastUpdateDisplayString: String = "Just now"

    init() {
        setupMockData()
    }

    private func setupMockData() {
        currentCaptain = CaptainData.Captain(
            name: "Marcus Bontempelli",
            team: "WBD",
            position: "MID"
        )

        currentDashboardData = DashboardData(
            teamValue: DashboardData.TeamValue(teamValue: 12_000_000),
            teamScore: DashboardData.TeamScore(totalScore: 1987),
            rank: DashboardData.Rank(rank: 5432),
            captain: DashboardData.Captain(captain: currentCaptain)
        )
    }

    func authenticate(teamId: String, sessionCookie: String, apiToken: String?) async -> Result<Void, Error> {
        loading = true
        try? await Task.sleep(nanoseconds: 2_000_000_000)
        authenticated = true
        loading = false
        return .success(())
    }

    func logout() {
        authenticated = false
    }

    func refreshDashboardData() async -> Bool {
        loading = true
        try? await Task.sleep(nanoseconds: 1_000_000_000)
        loading = false
        lastUpdateDisplayString = "Just now"
        return true
    }

    func clearError() {
        hasError = false
        errorMessage = nil
    }
}

// MARK: - AFLFantasyToolsClient

@MainActor
class AFLFantasyToolsClient: ObservableObject {
    @Published var isExecutingTool: Bool = false

    func getAIRecommendations(category: String?) async -> Result<[AIRecommendation], Error> {
        isExecutingTool = true
        try? await Task.sleep(nanoseconds: 1_000_000_000)
        isExecutingTool = false

        let mockRecommendations = [
            AIRecommendation(
                id: "1",
                title: "Consider Trading Max Gawn",
                description: "High injury risk and declining scores make this a good time to trade out",
                type: "Trade",
                priority: "High",
                confidence: 0.85,
                actionRequired: true,
                reasoning: "Max Gawn has shown declining performance and increased injury risk",
                data: ["Risk Score": "8.5", "Break Even": "90"]
            ),
            AIRecommendation(
                id: "2",
                title: "Captain Bontempelli This Round",
                description: "Excellent fixture and recent form suggests strong captain potential",
                type: "Captain",
                priority: "Medium",
                confidence: 0.92,
                actionRequired: false,
                reasoning: "Favorable matchup against Richmond with high scoring potential",
                data: ["Projected Score": "130", "Venue": "Marvel Stadium"]
            )
        ]

        return .success(mockRecommendations)
    }

    func getWeeklyInsights() async -> Result<[AIRecommendation], Error> {
        await getAIRecommendations(category: "Weekly")
    }

    func getCaptainSuggestions(round: Int?) async -> Result<[CaptainSuggestionAnalysis], Error> {
        isExecutingTool = true
        try? await Task.sleep(nanoseconds: 1_000_000_000)
        isExecutingTool = false

        let mockSuggestions = [
            CaptainSuggestionAnalysis(
                id: "1",
                player: "Marcus Bontempelli",
                team: "WBD",
                position: "MID",
                projectedScore: 130.0,
                floor: 95.0,
                ceiling: 165.0,
                confidence: 0.92,
                confidenceLevel: "High",
                reasoning: "Excellent recent form and favorable fixture against Richmond",
                fixture: FixtureAnalysis(
                    opponent: "Richmond",
                    venue: "Marvel Stadium",
                    difficulty: "Easy",
                    defensiveVulnerability: 7.8,
                    weatherImpact: "Minimal"
                )
            )
        ]

        return .success(mockSuggestions)
    }

    func getCashGenerationTargets(weeks: Int) async -> Result<[CashGenerationTarget], Error> {
        isExecutingTool = true
        try? await Task.sleep(nanoseconds: 1_000_000_000)
        isExecutingTool = false

        let mockTargets = [
            CashGenerationTarget(
                id: "1",
                player: "Hayden Young",
                currentPrice: 550_000,
                targetPrice: 670_000,
                cashGenerated: 120_000,
                breakeven: 45,
                expectedWeeks: weeks,
                confidence: 0.78,
                riskLevel: "Low"
            )
        ]

        return .success(mockTargets)
    }

    func getTradeRecommendations(budget: Int, position: String?) async -> Result<[TradeAnalysis], Error> {
        isExecutingTool = true
        try? await Task.sleep(nanoseconds: 1_500_000_000)
        isExecutingTool = false

        let mockTrades = [
            TradeAnalysis(
                id: "1",
                playerOut: "Max Gawn",
                playerIn: "Tim English",
                netCost: -50000,
                netCostFormatted: "-$50k",
                impactGrade: "A",
                confidence: 0.85,
                reasoning: "Gawn's injury concerns and English's strong form make this an excellent trade",
                warnings: ["Consider Gawn's captaincy potential"]
            )
        ]

        return .success(mockTrades)
    }

    func analyzeTradeOpportunity(
        playerOut: String,
        playerIn: String,
        budget: Int
    ) async -> Result<TradeAnalysis, Error> {
        isExecutingTool = true
        try? await Task.sleep(nanoseconds: 2_000_000_000)
        isExecutingTool = false

        let analysis = TradeAnalysis(
            id: UUID().uuidString,
            playerOut: playerOut,
            playerIn: playerIn,
            netCost: Int.random(in: -100_000 ... 200_000),
            netCostFormatted: "$\(Int.random(in: -100 ... 200))k",
            impactGrade: ["A+", "A", "B", "C"].randomElement() ?? "B",
            confidence: Double.random(in: 0.6 ... 0.95),
            reasoning: "Analysis shows this trade could improve your team structure and scoring potential.",
            warnings: budget < 100_000 ? ["Limited budget may restrict future trades"] : nil
        )

        return .success(analysis)
    }
}

// MARK: - DashboardData

struct DashboardData {
    let teamValue: TeamValue
    let teamScore: TeamScore
    let rank: Rank
    let captain: Captain

    struct TeamValue {
        let teamValue: Double
    }

    struct TeamScore {
        let totalScore: Int
    }

    struct Rank {
        let rank: Int
    }

    struct Captain {
        let captain: CaptainData.Captain?
    }
}

// MARK: - CaptainData

enum CaptainData {
    struct Captain {
        let name: String
        let team: String?
        let position: String?
    }
}

// MARK: - AIRecommendation

struct AIRecommendation: Identifiable {
    let id: String
    let title: String
    let description: String
    let type: String
    let priority: String
    let confidence: Double
    let actionRequired: Bool
    let reasoning: String
    let data: [String: String]?
}

// MARK: - CaptainSuggestionAnalysis

struct CaptainSuggestionAnalysis: Identifiable {
    let id: String
    let player: String
    let team: String
    let position: String
    let projectedScore: Double
    let floor: Double
    let ceiling: Double
    let confidence: Double
    let confidenceLevel: String
    let reasoning: String
    let fixture: FixtureAnalysis?
}

// MARK: - FixtureAnalysis

struct FixtureAnalysis {
    let opponent: String
    let venue: String
    let difficulty: String
    let defensiveVulnerability: Double?
    let weatherImpact: String?
}

// MARK: - CashGenerationTarget

struct CashGenerationTarget: Identifiable {
    let id: String
    let player: String
    let currentPrice: Int
    let targetPrice: Int
    let cashGenerated: Int
    let breakeven: Int
    let expectedWeeks: Int
    let confidence: Double
    let riskLevel: String
}

// MARK: - TradeAnalysis

struct TradeAnalysis: Identifiable {
    let id: String
    let playerOut: String
    let playerIn: String
    let netCost: Int
    let netCostFormatted: String
    let impactGrade: String
    let confidence: Double
    let reasoning: String
    let warnings: [String]?
}

// MARK: - DebugMenuView

struct DebugMenuView: View {
    let appState: AppState
    @Environment(\.dismiss) private var dismiss

    var body: some View {
        NavigationView {
            List {
                Section("Debug Actions") {
                    Button("Generate Random Scores") {
                        // Debug action
                    }

                    Button("Reset Captain Suggestions") {
                        // Debug action
                    }

                    Button("Simulate Network Error") {
                        appState.simulateError("Debug network error")
                        dismiss()
                    }
                }
            }
            .navigationTitle("Debug Menu")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Done") { dismiss() }
                }
            }
        }
    }
}

// MARK: - NotificationPermissionsView

struct NotificationPermissionsView: View {
    @Environment(\.dismiss) private var dismiss
    @State private var permissionStatus = "Unknown"

    var body: some View {
        NavigationView {
            VStack(spacing: 20) {
                Image(systemName: "bell.fill")
                    .font(.system(size: 60))
                    .foregroundColor(.orange)

                Text("Notification Permissions")
                    .font(.title2)
                    .bold()

                Text("Current Status: \(permissionStatus)")
                    .foregroundColor(.secondary)

                VStack(alignment: .leading, spacing: 12) {
                    Text("• Breakeven alerts when players near price drops")
                    Text("• Injury updates for your players")
                    Text("• Late team changes before lockout")
                    Text("• Trade recommendations from AI")
                    Text("• Price change notifications")
                }
                .padding()
                .background(Color(.secondarySystemBackground))
                .cornerRadius(12)

                Button("Request Permissions") {
                    requestPermissions()
                }
                .buttonStyle(.borderedProminent)

                Spacer()
            }
            .padding()
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Done") { dismiss() }
                }
            }
            .onAppear {
                checkPermissionStatus()
            }
        }
    }

    private func checkPermissionStatus() {
        UNUserNotificationCenter.current().getNotificationSettings { settings in
            DispatchQueue.main.async {
                switch settings.authorizationStatus {
                case .authorized:
                    permissionStatus = "Authorized"
                case .denied:
                    permissionStatus = "Denied"
                case .notDetermined:
                    permissionStatus = "Not Requested"
                case .provisional:
                    permissionStatus = "Provisional"
                case .ephemeral:
                    permissionStatus = "Ephemeral"
                @unknown default:
                    permissionStatus = "Unknown"
                }
            }
        }
    }

    private func requestPermissions() {
        UNUserNotificationCenter.current().requestAuthorization(
            options: [.alert, .badge, .sound]
        ) { granted, _ in
            DispatchQueue.main.async {
                permissionStatus = granted ? "Authorized" : "Denied"
            }
        }
    }
}

// MARK: - CaptainSuggestion

// CaptainSuggestion model
struct CaptainSuggestion: Identifiable, Codable {
    let id = UUID()
    let player: EnhancedPlayer
    let confidence: Int
    let projectedPoints: Int

    init(player: EnhancedPlayer, confidence: Int, projectedPoints: Int) {
        self.player = player
        self.confidence = confidence
        self.projectedPoints = projectedPoints
    }

    // Additional properties for ContentView compatibility
    var playerName: String {
        player.name
    }

    var position: String {
        player.position.rawValue
    }

    var opponent: String {
        player.nextRoundProjection.opponent
    }

    var positionColor: Color {
        player.position.color
    }

    var projectedScore: Double {
        player.projectedScore
    }

    var formRating: Double {
        player.consistency / 100.0
    }

    var fixtureRating: Double {
        0.8 // Simulated fixture rating
    }

    var riskFactor: Double {
        player.injuryRisk.riskScore
    }
}

// MARK: - TradeRecord

// TradeRecord model
struct TradeRecord: Identifiable, Codable {
    let id: UUID
    let playerOut: EnhancedPlayer
    let playerIn: EnhancedPlayer
    let executedAt: Date
    let netCost: Int
    let projectedImpact: Double

    init(
        id: UUID = UUID(),
        playerOut: EnhancedPlayer,
        playerIn: EnhancedPlayer,
        executedAt: Date,
        netCost: Int,
        projectedImpact: Double
    ) {
        self.id = id
        self.playerOut = playerOut
        self.playerIn = playerIn
        self.executedAt = executedAt
        self.netCost = netCost
        self.projectedImpact = projectedImpact
    }
}

// MARK: - AFLTeam

enum AFLTeam: String, CaseIterable, Codable {
    case adelaide = "Adelaide"
    case brisbane = "Brisbane"
    case carlton = "Carlton"
    case collingwood = "Collingwood"
    case essendon = "Essendon"
    case fremantle = "Fremantle"
    case geelong = "Geelong"
    case goldCoast = "Gold Coast"
    case gws = "GWS"
    case hawthorn = "Hawthorn"
    case melbourne = "Melbourne"
    case northMelbourne = "North Melbourne"
    case portAdelaide = "Port Adelaide"
    case richmond = "Richmond"
    case stKilda = "St Kilda"
    case sydney = "Sydney"
    case westCoast = "West Coast"
    case westernBulldogs = "Western Bulldogs"

    var emoji: String {
        switch self {
        case .adelaide: "🔴"
        case .brisbane: "🦁"
        case .carlton: "🔵"
        case .collingwood: "⚫"
        case .essendon: "🔴"
        case .fremantle: "⚓"
        case .geelong: "🐱"
        case .goldCoast: "☀️"
        case .gws: "🧡"
        case .hawthorn: "🦅"
        case .melbourne: "😈"
        case .northMelbourne: "🦘"
        case .portAdelaide: "⚡"
        case .richmond: "🐅"
        case .stKilda: "👼"
        case .sydney: "🦢"
        case .westCoast: "🦅"
        case .westernBulldogs: "🐕"
        }
    }
}

// MARK: - AFLFantasyApp

// Alternative main app implementation
struct AFLFantasyAppAlternative: App {
    // MARK: - State Objects

    @StateObject private var dataService = AFLFantasyDataService()
    @StateObject private var appState = AppState()
    @StateObject private var keychainManager = KeychainManager()
    @StateObject private var audioManager = AFLAudioManager()
    @StateObject private var hapticsManager = AFLHapticsManager()
    @State private var showOnboarding = false
    @State private var hasCheckedOnboarding = false

    // MARK: - Scene

    var body: some Scene {
        WindowGroup {
            Group {
                if !hasCheckedOnboarding {
                    // Show loading state while checking onboarding status
                    LoadingView()
                } else if showOnboarding {
                    // Show onboarding flow
                    OnboardingView {
                        showOnboarding = false
                        setupApp()
                    }
                } else {
                    // Show main app
                    SimpleContentView()
                        .environmentObject(dataService)
                        .environmentObject(appState)
                        .environmentObject(audioManager)
                        .environmentObject(hapticsManager)
                }
            }
            .preferredColorScheme(.dark)
            .onAppear {
                checkOnboardingStatus()
            }
        }
    }

    // MARK: - Setup

    private func checkOnboardingStatus() {
        // Check if user needs onboarding
        showOnboarding = keychainManager.needsOnboarding()
        hasCheckedOnboarding = true

        // Setup app if not showing onboarding
        if !showOnboarding {
            setupApp()
        }
    }

    private func setupApp() {
        // Start performance monitoring
        PerformanceMonitor.shared.startColdStartTimer()
        
        // Configure any app-level settings here
        print("🚀 AFL Fantasy Intelligence Platform started")

        // Load user preferences
        if let userName = keychainManager.getUserName() {
            print("👋 Welcome back, \(userName)!")
        }

        if let favoriteTeam = keychainManager.getFavoriteTeam() {
            print("🏈 Go \(favoriteTeam)!")
        }
        
        // Trigger AFL experience launch
        Task {
            try? await Task.sleep(nanoseconds: 1_000_000_000) // 1 second delay
            await MainActor.run {
                audioManager.onAppLaunch()
                hapticsManager.onAppLaunch()
                
                // End performance monitoring after app is ready
                PerformanceMonitor.shared.endColdStartTimer()
            }
        }

        // Debug information
        #if DEBUG
            print("📱 Running in DEBUG mode")
            if dataService.authenticated {
                print("✅ User is authenticated")
            } else {
                print("❌ User not authenticated")
            }
        #endif
    }
}

// MARK: - AppState

// AppState type alias for compatibility
typealias PersistentAppState = AppState

// MARK: - AppState

@MainActor
class AppState: ObservableObject {
    @Published var selectedTab: TabItem = .dashboard
    @Published var teamScore: Int = 1987
    @Published var teamRank: Int = 5432
    @Published var players: [EnhancedPlayer] = []
    @Published var captainSuggestions: [CaptainSuggestion] = []
    @Published var cashCows: [EnhancedPlayer] = []

    // Trade management
    @Published var tradesUsed: Int = 2
    @Published var tradesRemaining: Int = 8
    @Published var tradeHistory: [TradeRecord] = []

    // Team financials
    @Published var teamValue: Int = 12_000_000
    @Published var bankBalance: Int = 300_000

    // Connection and sync
    @Published var isRefreshing: Bool = false
    @Published var lastUpdateTime: Date? = Date()
    @Published var errorMessage: String?

    init() {
        loadEnhancedData()
        generateCaptainSuggestions()
    }

    private func loadEnhancedData() {
        players = createSamplePlayers()
        cashCows = players.filter(\.isCashCow)
    }

    private func createSamplePlayers() -> [EnhancedPlayer] {
        let samplePlayers = [
            createPremiumMidfielder(),
            createPremiumRuck(),
            createConsistentMidfielder(),
            createCashCowDefender(),
            createContractYearMidfielder()
        ]
        return samplePlayers
    }

    private func createPremiumMidfielder() -> EnhancedPlayer {
        EnhancedPlayer(
            id: UUID().uuidString,
            name: "Marcus Bontempelli",
            position: .midfielder,
            price: 850_000,
            currentScore: 125,
            averageScore: 118.5,
            breakeven: 85,
            consistency: 92.0,
            highScore: 156,
            lowScore: 85,
            priceChange: 25000,
            isCashCow: false,
            isDoubtful: false,
            isSuspended: false,
            cashGenerated: 0,
            projectedPeakPrice: 900_000,
            nextRoundProjection: RoundProjection(
                round: 15,
                opponent: "Richmond",
                venue: "Marvel Stadium",
                projectedScore: 130.0,
                confidence: 0.85,
                conditions: WeatherConditions(temperature: 18.0, rainProbability: 0.2, windSpeed: 12.0, humidity: 65.0)
            ),
            seasonProjection: SeasonProjection(
                projectedTotalScore: 2368.0,
                projectedAverage: 118.4,
                premiumPotential: 0.92
            ),
            injuryRisk: InjuryRisk(
                riskLevel: .low,
                riskScore: 0.15,
                riskFactors: []
            ),
            venuePerformance: [
                VenuePerformance(venue: "Marvel Stadium", gamesPlayed: 8, averageScore: 122.3, bias: 3.5)
            ],
            alertFlags: []
        )
    }

    private func createPremiumRuck() -> EnhancedPlayer {
        EnhancedPlayer(
            id: UUID().uuidString,
            name: "Max Gawn",
            position: .ruck,
            price: 780_000,
            currentScore: 98,
            averageScore: 105.2,
            breakeven: 90,
            consistency: 88.0,
            highScore: 135,
            lowScore: 68,
            priceChange: -15000,
            isCashCow: false,
            isDoubtful: true,
            isSuspended: false,
            cashGenerated: 0,
            projectedPeakPrice: 800_000,
            nextRoundProjection: RoundProjection(
                round: 15,
                opponent: "Collingwood",
                venue: "MCG",
                projectedScore: 105.0,
                confidence: 0.78,
                conditions: WeatherConditions(temperature: 16.0, rainProbability: 0.1, windSpeed: 8.0, humidity: 58.0)
            ),
            seasonProjection: SeasonProjection(
                projectedTotalScore: 2104.0,
                projectedAverage: 105.2,
                premiumPotential: 0.88
            ),
            injuryRisk: InjuryRisk(
                riskLevel: .medium,
                riskScore: 0.35,
                riskFactors: ["Previous knee injury", "Heavy ruck load"]
            ),
            venuePerformance: [
                VenuePerformance(venue: "MCG", gamesPlayed: 12, averageScore: 107.3, bias: 2.0)
            ],
            alertFlags: [
                AlertFlag(type: .injuryRisk, priority: .medium, message: "Monitor knee condition")
            ]
        )
    }

    private func createConsistentMidfielder() -> EnhancedPlayer {
        EnhancedPlayer(
            id: UUID().uuidString,
            name: "Touk Miller",
            position: .midfielder,
            price: 720_000,
            currentScore: 110,
            averageScore: 108.8,
            breakeven: 75,
            consistency: 89.0,
            highScore: 132,
            lowScore: 88,
            priceChange: 20000,
            isCashCow: false,
            isDoubtful: false,
            isSuspended: false,
            cashGenerated: 0,
            projectedPeakPrice: 740_000,
            nextRoundProjection: RoundProjection(
                round: 15,
                opponent: "Geelong",
                venue: "GMHBA Stadium",
                projectedScore: 115.0,
                confidence: 0.82,
                conditions: WeatherConditions(temperature: 14.0, rainProbability: 0.4, windSpeed: 18.0, humidity: 75.0)
            ),
            seasonProjection: SeasonProjection(
                projectedTotalScore: 2176.0,
                projectedAverage: 108.8,
                premiumPotential: 0.89
            ),
            injuryRisk: InjuryRisk(
                riskLevel: .low,
                riskScore: 0.12,
                riskFactors: []
            ),
            venuePerformance: [
                VenuePerformance(venue: "GMHBA Stadium", gamesPlayed: 6, averageScore: 103.2, bias: -1.5)
            ],
            alertFlags: [
                AlertFlag(
                    type: .premiumBreakout,
                    priority: .high,
                    message: "Contract year motivation - monitor performance"
                )
            ]
        )
    }

    private func createCashCowDefender() -> EnhancedPlayer {
        EnhancedPlayer(
            id: UUID().uuidString,
            name: "Hayden Young",
            position: .defender,
            price: 550_000,
            currentScore: 78,
            averageScore: 85.2,
            breakeven: 45,
            consistency: 76.0,
            highScore: 98,
            lowScore: 62,
            priceChange: 35000,
            isCashCow: true,
            isDoubtful: false,
            isSuspended: false,
            cashGenerated: 120_000,
            projectedPeakPrice: 620_000,
            nextRoundProjection: RoundProjection(
                round: 15,
                opponent: "Sydney",
                venue: "Optus Stadium",
                projectedScore: 88.0,
                confidence: 0.74,
                conditions: WeatherConditions(temperature: 20.0, rainProbability: 0.0, windSpeed: 22.0, humidity: 45.0)
            ),
            seasonProjection: SeasonProjection(
                projectedTotalScore: 1704.0,
                projectedAverage: 85.2,
                premiumPotential: 0.76
            ),
            injuryRisk: InjuryRisk(
                riskLevel: .low,
                riskScore: 0.14,
                riskFactors: []
            ),
            venuePerformance: [
                VenuePerformance(venue: "Optus Stadium", gamesPlayed: 5, averageScore: 89.4, bias: 4.2)
            ],
            alertFlags: [
                AlertFlag(
                    type: .cashCowSell,
                    priority: .high,
                    message: "Cash cow approaching peak price - consider selling soon"
                )
            ]
        )
    }

    private func createContractYearMidfielder() -> EnhancedPlayer {
        EnhancedPlayer(
            id: UUID().uuidString,
            name: "Sam Walsh",
            position: .midfielder,
            price: 750_000,
            currentScore: 115,
            averageScore: 112.4,
            breakeven: 80,
            consistency: 87.0,
            highScore: 145,
            lowScore: 92,
            priceChange: 30000,
            isCashCow: false,
            isDoubtful: false,
            isSuspended: false,
            cashGenerated: 0,
            projectedPeakPrice: 780_000,
            nextRoundProjection: RoundProjection(
                round: 15,
                opponent: "Hawthorn",
                venue: "MCG",
                projectedScore: 118.0,
                confidence: 0.80,
                conditions: WeatherConditions(temperature: 15.0, rainProbability: 0.3, windSpeed: 15.0, humidity: 68.0)
            ),
            seasonProjection: SeasonProjection(
                projectedTotalScore: 2248.0,
                projectedAverage: 112.4,
                premiumPotential: 0.87
            ),
            injuryRisk: InjuryRisk(
                riskLevel: .low,
                riskScore: 0.18,
                riskFactors: ["Minor shoulder concern"]
            ),
            venuePerformance: [
                VenuePerformance(venue: "MCG", gamesPlayed: 9, averageScore: 115.1, bias: 1.8)
            ],
            alertFlags: [
                AlertFlag(type: .contractYear, priority: .high, message: "Contract year - motivated for strong finish")
            ]
        )
    }

    private func generateCaptainSuggestions() {
        let topPlayers = players.sorted { $0.averageScore > $1.averageScore }.prefix(3)

        captainSuggestions = topPlayers.enumerated().map { index, player in
            let confidence = Int(90 - Double(index) * 5 + player.consistency * 0.1)
            let projectedPoints = Int(player.projectedScore * 2 + Double.random(in: -10 ... 10))

            return CaptainSuggestion(
                player: player,
                confidence: confidence,
                projectedPoints: projectedPoints
            )
        }
    }

    // MARK: - Public Methods

    func refreshData() {
        Task {
            await MainActor.run {
                isRefreshing = true
                errorMessage = nil
            }

            // Simulate API call
            try? await Task.sleep(nanoseconds: 2_000_000_000)

            await MainActor.run {
                isRefreshing = false
                lastUpdateTime = Date()

                // Update some sample data
                teamScore = Int.random(in: 1800 ... 2200)
                teamRank = Int.random(in: 1000 ... 15000)
            }
        }
    }

    func simulateError(_ message: String) {
        errorMessage = message
    }

    func clearError() {
        errorMessage = nil
    }
}

// MARK: - LoadingView

struct LoadingView: View {
    @State private var isAnimating = false

    var body: some View {
        ZStack {
            LinearGradient(
                gradient: Gradient(colors: [.orange, .red]),
                startPoint: .topLeading,
                endPoint: .bottomTrailing
            )
            .ignoresSafeArea()

            VStack(spacing: 20) {
                Image(systemName: "football.fill")
                    .font(.system(size: 60))
                    .foregroundColor(.white)
                    .scaleEffect(isAnimating ? 1.2 : 0.8)
                    .animation(
                        .easeInOut(duration: 1.0)
                            .repeatForever(autoreverses: true),
                        value: isAnimating
                    )

                Text("AFL Fantasy Intelligence")
                    .font(.title2)
                    .fontWeight(.bold)
                    .foregroundColor(.white)

                ProgressView()
                    .progressViewStyle(CircularProgressViewStyle(tint: .white))
                    .scaleEffect(1.2)
            }
        }
        .onAppear {
            isAnimating = true
        }
    }
}

// MARK: - OnboardingView

struct OnboardingView: View {
    let onComplete: () -> Void

    var body: some View {
        ZStack {
            LinearGradient(
                gradient: Gradient(colors: [.blue, .purple]),
                startPoint: .topLeading,
                endPoint: .bottomTrailing
            )
            .ignoresSafeArea()

            VStack(spacing: 30) {
                Spacer()

                Image(systemName: "brain.head.profile")
                    .font(.system(size: 80))
                    .foregroundColor(.white)

                Text("Welcome to AFL Fantasy Intelligence")
                    .font(.title)
                    .fontWeight(.bold)
                    .foregroundColor(.white)
                    .multilineTextAlignment(.center)

                Text("Get AI-powered insights and analysis to dominate your fantasy league")
                    .font(.subheadline)
                    .foregroundColor(.white.opacity(0.8))
                    .multilineTextAlignment(.center)
                    .padding(.horizontal, 40)

                Spacer()

                Button("Get Started") {
                    onComplete()
                }
                .font(.headline)
                .foregroundColor(.blue)
                .frame(maxWidth: .infinity)
                .padding()
                .background(.white)
                .cornerRadius(12)
                .padding(.horizontal, 40)

                Spacer()
            }
        }
    }
}

// MARK: - SimpleContentView

struct SimpleContentView: View {
    @EnvironmentObject var appState: AppState

    var body: some View {
        TabView(selection: $appState.selectedTab) {
            SimpleTradeCalculatorView()
                .tabItem {
                    Image(systemName: "arrow.triangle.2.circlepath")
                    Text("Trades")
                }
                .tag(TabItem.trades)

            SimpleDashboardView()
                .tabItem {
                    Image(systemName: "house.fill")
                    Text("Dashboard")
                }
                .tag(TabItem.dashboard)

            SimpleCaptainView()
                .tabItem {
                    Image(systemName: "star.fill")
                    Text("Captain")
                }
                .tag(TabItem.captain)

            SimpleCashCowView()
                .tabItem {
                    Image(systemName: "dollarsign.circle.fill")
                    Text("Cash Cow")
                }
                .tag(TabItem.cashCow)

            SimpleSettingsView()
                .tabItem {
                    Image(systemName: "gearshape.fill")
                    Text("Settings")
                }
                .tag(TabItem.settings)
        }
        .accentColor(.orange)
    }
}

// MARK: - SimpleDashboardView

struct SimpleDashboardView: View {
    @EnvironmentObject var appState: AppState

    var body: some View {
        NavigationView {
            ScrollView {
                VStack(spacing: 20) {
                    // Team Score Header
                    VStack {
                        Text("Team Score: \(appState.teamScore)")
                            .font(.title2)
                            .fontWeight(.bold)

                        Text("Rank: #\(appState.teamRank)")
                            .font(.subheadline)
                            .foregroundColor(.secondary)
                    }
                    .padding()
                    .background(Color(.secondarySystemBackground))
                    .cornerRadius(12)
                    .padding(.horizontal)

                    // Players List
                    LazyVStack(spacing: 12) {
                        ForEach(appState.players) { player in
                            SimplePlayerCard(player: player)
                        }
                    }
                    .padding(.horizontal)
                }
            }
            .navigationTitle("🏆 Dashboard")
            .navigationBarTitleDisplayMode(.large)
        }
    }
}

// MARK: - SimplePlayerCard

struct SimplePlayerCard: View {
    let player: EnhancedPlayer

    var body: some View {
        VStack(alignment: .leading, spacing: 8) {
            HStack {
                VStack(alignment: .leading) {
                    Text(player.name)
                        .font(.headline)
                    Text(player.position.rawValue)
                        .font(.caption)
                        .foregroundColor(.secondary)
                }

                Spacer()

                VStack(alignment: .trailing) {
                    Text("\(player.currentScore)")
                        .font(.title2)
                        .fontWeight(.bold)
                        .foregroundColor(.orange)
                    Text(player.formattedPrice)
                        .font(.caption)
                        .foregroundColor(.secondary)
                }
            }
        }
        .padding()
        .background(Color(.secondarySystemBackground))
        .cornerRadius(8)
    }
}

// MARK: - SimpleCaptainView

struct SimpleCaptainView: View {
    @EnvironmentObject var appState: AppState

    var body: some View {
        NavigationView {
            ScrollView {
                VStack(spacing: 16) {
                    Text("🧠 AI Captain Advisor")
                        .font(.title2)
                        .fontWeight(.bold)
                        .padding()

                    ForEach(appState.captainSuggestions) { suggestion in
                        SimpleCaptainCard(suggestion: suggestion)
                    }
                }
                .padding()
            }
            .navigationTitle("⭐ Captain AI")
            .navigationBarTitleDisplayMode(.large)
        }
    }
}

// MARK: - SimpleCaptainCard

struct SimpleCaptainCard: View {
    let suggestion: CaptainSuggestion

    var body: some View {
        VStack(alignment: .leading, spacing: 8) {
            HStack {
                Text(suggestion.player.name)
                    .font(.headline)

                Spacer()

                Text("\(suggestion.confidence)%")
                    .font(.subheadline)
                    .fontWeight(.semibold)
                    .foregroundColor(.green)
            }

            Text("Projected: \(suggestion.projectedPoints) pts")
                .font(.subheadline)
                .foregroundColor(.secondary)
        }
        .padding()
        .background(Color(.secondarySystemBackground))
        .cornerRadius(8)
    }
}

// MARK: - SimpleTradeCalculatorView

struct SimpleTradeCalculatorView: View {
    var body: some View {
        NavigationView {
            VStack {
                Text("🔄 Trade Calculator")
                    .font(.title2)
                    .fontWeight(.bold)
                    .padding()

                Text("Coming Soon")
                    .foregroundColor(.secondary)

                Spacer()
            }
            .navigationTitle("🔄 Trades")
            .navigationBarTitleDisplayMode(.large)
        }
    }
}

// MARK: - SimpleCashCowView

struct SimpleCashCowView: View {
    var body: some View {
        NavigationView {
            VStack {
                Text("💰 Cash Cow Tracker")
                    .font(.title2)
                    .fontWeight(.bold)
                    .padding()

                Text("Coming Soon")
                    .foregroundColor(.secondary)

                Spacer()
            }
            .navigationTitle("💰 Cash Cow")
            .navigationBarTitleDisplayMode(.large)
        }
    }
}

// MARK: - SimpleSettingsView

struct SimpleSettingsView: View {
    var body: some View {
        NavigationView {
            VStack {
                Text("⚙️ Settings")
                    .font(.title2)
                    .fontWeight(.bold)
                    .padding()

                Text("Coming Soon")
                    .foregroundColor(.secondary)

                Spacer()
            }
            .navigationTitle("⚙️ Settings")
            .navigationBarTitleDisplayMode(.large)
        }
    }
}

// MARK: - AFLFantasyTabView

struct AFLFantasyTabView: View {
    @EnvironmentObject var appState: AppState
    
    var body: some View {
        Text("Advanced TabView Coming Soon")
            .font(.title)
            .foregroundColor(.orange)
    }
}

struct AlertCenterView: View {
    var body: some View {
        NavigationView {
            VStack {
                Image(systemName: "bell.fill")
                    .font(.system(size: 60))
                    .foregroundColor(.red)
                    .padding()
                
                Text("⚠️ Smart Alert System")
                    .font(.title2)
                    .fontWeight(.bold)
                    .padding()
                
                Text("AI Alert Generator proactively warns you about price drop risks, breakeven cliffs, and potential cash cows before the market moves.")
                    .font(.subheadline)
                    .foregroundColor(.secondary)
                    .multilineTextAlignment(.center)
                    .padding(.horizontal)
                
                Spacer()
                
                Text("Coming Soon")
                    .font(.caption)
                    .foregroundColor(.secondary)
                    .padding()
            }
            .navigationTitle("⚠️ Alert Center")
            .navigationBarTitleDisplayMode(.large)
        }
    }
}

struct AnalysisCenterView: View {
    var body: some View {
        NavigationView {
            ScrollView {
                LazyVStack(spacing: 20) {
                    // Header
                    VStack(spacing: 16) {
                        Image(systemName: "chart.bar.fill")
                            .font(.system(size: 60))
                            .foregroundColor(.purple)
                        
                        Text("📊 Advanced Analysis")
                            .font(.title2)
                            .fontWeight(.bold)
                        
                        Text("Deep dive analytics and contextual player analysis")
                            .font(.subheadline)
                            .foregroundColor(.secondary)
                            .multilineTextAlignment(.center)
                    }
                    .padding()
                    
                    // Analysis Categories
                    LazyVGrid(columns: Array(repeating: GridItem(.flexible()), count: 2), spacing: 16) {
                        AnalysisCategoryCard(
                            title: "Cash Generation",
                            subtitle: "Price Analytics",
                            icon: "dollarsign.circle.fill",
                            color: .green,
                            description: "Track cash cow potential and optimal sell windows"
                        )
                        
                        AnalysisCategoryCard(
                            title: "Venue Bias",
                            subtitle: "Ground Analysis",
                            icon: "location.fill",
                            color: .blue,
                            description: "Player performance by venue and conditions"
                        )
                        
                        AnalysisCategoryCard(
                            title: "Consistency Scores",
                            subtitle: "Reliability Metrics",
                            icon: "chart.line.uptrend.xyaxis",
                            color: .orange,
                            description: "How reliably players hit projected scores"
                        )
                        
                        AnalysisCategoryCard(
                            title: "Risk Assessment",
                            subtitle: "Injury & Suspension",
                            icon: "exclamationmark.triangle.fill",
                            color: .red,
                            description: "Algorithmic risk scoring for smart decisions"
                        )
                        
                        AnalysisCategoryCard(
                            title: "Fixture Analysis",
                            subtitle: "Upcoming Difficulty",
                            icon: "calendar.circle.fill",
                            color: .purple,
                            description: "5-round fixture difficulty ratings"
                        )
                        
                        AnalysisCategoryCard(
                            title: "Weather Impact",
                            subtitle: "Conditions Model",
                            icon: "cloud.rain.fill",
                            color: .gray,
                            description: "Performance adjustments for rain and wind"
                        )
                    }
                    .padding(.horizontal)
                }
                .padding(.bottom)
            }
            .navigationTitle("📊 Analysis")
            .navigationBarTitleDisplayMode(.large)
        }
    }
}

struct AnalysisCategoryCard: View {
    let title: String
    let subtitle: String
    let icon: String
    let color: Color
    let description: String
    
    var body: some View {
        VStack(alignment: .leading, spacing: 12) {
            HStack {
                Image(systemName: icon)
                    .font(.title2)
                    .foregroundColor(color)
                
                Spacer()
            }
            
            VStack(alignment: .leading, spacing: 4) {
                Text(title)
                    .font(.headline)
                    .fontWeight(.semibold)
                
                Text(subtitle)
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            
            Text(description)
                .font(.caption)
                .foregroundColor(.secondary)
                .fixedSize(horizontal: false, vertical: true)
            
            Spacer()
        }
        .padding()
        .frame(maxWidth: .infinity, alignment: .leading)
        .frame(height: 140)
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(.ultraThinMaterial)
        )
    }
}

