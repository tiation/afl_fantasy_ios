import SwiftUI

// MARK: - TeamsView

struct TeamsView: View {
    @StateObject private var teamManager = TeamManager()
    @State private var showingScanner = false
    @State private var showingAddTeam = false
    @State private var showingTeamDetails: FantasyTeam?
    
    var body: some View {
        NavigationView {
            ScrollView {
                LazyVStack(spacing: DS.Spacing.l) {
                    // Active Team Section
                    if let activeTeam = teamManager.activeTeam {
                        ActiveTeamCard(team: activeTeam, teamManager: teamManager)
                    }
                    
                    // Add Team Section
                    AddTeamSection(
                        onScanTapped: { showingScanner = true },
                        onManualTapped: { showingAddTeam = true }
                    )
                    
                    // All Teams Section
                    if !teamManager.teams.isEmpty {
                        TeamsListSection(
                            teams: teamManager.teams,
                            activeTeam: teamManager.activeTeam,
                            onTeamTapped: { team in
                                showingTeamDetails = team
                            },
                            onActiveTeamChanged: { team in
                                teamManager.setActiveTeam(team)
                            },
                            onTeamDeleted: { team in
                                teamManager.removeTeam(team)
                            }
                        )
                    }
                    
                    // Loading State
                    if teamManager.isLoading {
                        ProgressView("Loading...")\n                            .padding(DS.Spacing.xl)\n                    }
                }\n                .padding(DS.Spacing.m)\n            }\n            .navigationTitle("My Teams")\n            .navigationBarTitleDisplayMode(.large)\n            .toolbar {\n                ToolbarItem(placement: .primaryAction) {\n                    Menu {\n                        Button(action: { showingScanner = true }) {\n                            Label("Scan Barcode", systemImage: "qrcode.viewfinder")\n                        }\n                        \n                        Button(action: { showingAddTeam = true }) {\n                            Label("Add Manually", systemImage: "plus")\n                        }\n                        \n                        Button(action: {\n                            Task {\n                                await teamManager.refreshTeams()\n                            }\n                        }) {\n                            Label("Refresh Teams", systemImage: "arrow.clockwise")\n                        }\n                    } label: {\n                        Image(systemName: "plus.circle")\n                    }\n                }\n            }\n            .refreshable {\n                await teamManager.refreshTeams()\n            }\n            .alert("Team Error", isPresented: .constant(teamManager.error != nil)) {\n                Button("OK") {\n                    teamManager.error = nil\n                }\n            } message: {\n                if let error = teamManager.error {\n                    Text(error.localizedDescription)\n                }\n            }\n        }\n        .fullScreenCover(isPresented: $showingScanner) {\n            BarcodeScannerView { code, type in\n                showingScanner = false\n                Task {\n                    await teamManager.addTeam(code: code, barcodeType: type)\n                }\n            }\n        }\n        .sheet(isPresented: $showingAddTeam) {\n            AddTeamManuallyView { name, code, league in\n                teamManager.addTeam(name: name, code: code, league: league)\n                showingAddTeam = false\n            }\n        }\n        .sheet(item: $showingTeamDetails) { team in\n            TeamDetailsView(team: team)\n        }\n    }\n}\n\n// MARK: - ActiveTeamCard\n\nstruct ActiveTeamCard: View {\n    let team: FantasyTeam\n    let teamManager: TeamManager\n    \n    var body: some View {\n        VStack(alignment: .leading, spacing: DS.Spacing.m) {\n            HStack {\n                VStack(alignment: .leading, spacing: DS.Spacing.xs) {\n                    Text("Active Team")\n                        .font(DS.Typography.caption)\n                        .foregroundColor(DS.Colors.onSurfaceSecondary)\n                    \n                    Text(team.name)\n                        .font(DS.Typography.largeTitle)\n                        .foregroundColor(DS.Colors.onSurface)\n                }\n                \n                Spacer()\n                \n                VStack(alignment: .trailing, spacing: DS.Spacing.xs) {\n                    Text("\\(team.league)")\n                        .font(DS.Typography.caption)\n                        .padding(.horizontal, DS.Spacing.s)\n                        .padding(.vertical, DS.Spacing.xs)\n                        .background(DS.Colors.primary.opacity(0.1))\n                        .foregroundColor(DS.Colors.primary)\n                        .cornerRadius(8)\n                    \n                    if let rank = team.rank {\n                        Text("Rank: #\\(rank)")\n                            .font(DS.Typography.caption)\n                            .foregroundColor(DS.Colors.onSurfaceSecondary)\n                    }\n                }\n            }\n            \n            if let points = team.points {\n                HStack {\n                    VStack(alignment: .leading, spacing: DS.Spacing.xs) {\n                        Text("Total Points")\n                            .font(DS.Typography.caption)\n                            .foregroundColor(DS.Colors.onSurfaceSecondary)\n                        \n                        Text("\\(points)")\n                            .font(DS.Typography.headline)\n                            .foregroundColor(DS.Colors.onSurface)\n                    }\n                    \n                    Spacer()\n                    \n                    VStack(alignment: .trailing, spacing: DS.Spacing.xs) {\n                        Text("Players")\n                            .font(DS.Typography.caption)\n                            .foregroundColor(DS.Colors.onSurfaceSecondary)\n                        \n                        Text("\\(team.players.count)")\n                            .font(DS.Typography.headline)\n                            .foregroundColor(DS.Colors.onSurface)\n                    }\n                }\n            }\n        }\n        .padding(DS.Spacing.l)\n        .background(DS.Colors.surface)\n        .cornerRadius(DS.Radius.large)\n        .shadow(color: .black.opacity(0.1), radius: 2, x: 0, y: 1)\n    }\n}\n\n// MARK: - AddTeamSection\n\nstruct AddTeamSection: View {\n    let onScanTapped: () -> Void\n    let onManualTapped: () -> Void\n    \n    var body: some View {\n        VStack(spacing: DS.Spacing.m) {\n            Text("Add New Team")\n                .font(DS.Typography.headline)\n                .foregroundColor(DS.Colors.onSurface)\n            \n            HStack(spacing: DS.Spacing.m) {\n                // Scan Barcode Button\n                Button(action: onScanTapped) {\n                    VStack(spacing: DS.Spacing.s) {\n                        Image(systemName: "qrcode.viewfinder")\n                            .font(.largeTitle)\n                            .foregroundColor(DS.Colors.primary)\n                        \n                        Text("Scan Code")\n                            .font(DS.Typography.body)\n                            .foregroundColor(DS.Colors.onSurface)\n                        \n                        Text("Use camera to scan team barcode or QR code")\n                            .font(DS.Typography.caption)\n                            .foregroundColor(DS.Colors.onSurfaceSecondary)\n                            .multilineTextAlignment(.center)\n                    }\n                    .frame(maxWidth: .infinity)\n                    .padding(DS.Spacing.l)\n                    .background(DS.Colors.surface)\n                    .cornerRadius(DS.Radius.medium)\n                    .overlay(\n                        RoundedRectangle(cornerRadius: DS.Radius.medium)\n                            .stroke(DS.Colors.primary, lineWidth: 1)\n                    )\n                }\n                \n                // Manual Entry Button\n                Button(action: onManualTapped) {\n                    VStack(spacing: DS.Spacing.s) {\n                        Image(systemName: "keyboard")\n                            .font(.largeTitle)\n                            .foregroundColor(DS.Colors.secondary)\n                        \n                        Text("Enter Manually")\n                            .font(DS.Typography.body)\n                            .foregroundColor(DS.Colors.onSurface)\n                        \n                        Text("Type team code and details manually")\n                            .font(DS.Typography.caption)\n                            .foregroundColor(DS.Colors.onSurfaceSecondary)\n                            .multilineTextAlignment(.center)\n                    }\n                    .frame(maxWidth: .infinity)\n                    .padding(DS.Spacing.l)\n                    .background(DS.Colors.surface)\n                    .cornerRadius(DS.Radius.medium)\n                    .overlay(\n                        RoundedRectangle(cornerRadius: DS.Radius.medium)\n                            .stroke(DS.Colors.outline, lineWidth: 1)\n                    )\n                }\n            }\n        }\n        .padding(DS.Spacing.m)\n        .background(DS.Colors.background)\n        .cornerRadius(DS.Radius.large)\n    }\n}\n\n// MARK: - TeamsListSection\n\nstruct TeamsListSection: View {\n    let teams: [FantasyTeam]\n    let activeTeam: FantasyTeam?\n    let onTeamTapped: (FantasyTeam) -> Void\n    let onActiveTeamChanged: (FantasyTeam) -> Void\n    let onTeamDeleted: (FantasyTeam) -> Void\n    \n    var body: some View {\n        VStack(alignment: .leading, spacing: DS.Spacing.m) {\n            Text("All Teams (\\(teams.count))")\n                .font(DS.Typography.headline)\n                .foregroundColor(DS.Colors.onSurface)\n            \n            LazyVStack(spacing: DS.Spacing.s) {\n                ForEach(teams) { team in\n                    TeamRowView(\n                        team: team,\n                        isActive: team.id == activeTeam?.id,\n                        onTapped: { onTeamTapped(team) },\n                        onSetActive: { onActiveTeamChanged(team) },\n                        onDelete: { onTeamDeleted(team) }\n                    )\n                }\n            }\n        }\n    }\n}\n\n// MARK: - TeamRowView\n\nstruct TeamRowView: View {\n    let team: FantasyTeam\n    let isActive: Bool\n    let onTapped: () -> Void\n    let onSetActive: () -> Void\n    let onDelete: () -> Void\n    \n    @State private var showingDeleteConfirmation = false\n    \n    var body: some View {\n        Button(action: onTapped) {\n            HStack(spacing: DS.Spacing.m) {\n                VStack(alignment: .leading, spacing: DS.Spacing.xs) {\n                    HStack {\n                        Text(team.name)\n                            .font(DS.Typography.body)\n                            .foregroundColor(DS.Colors.onSurface)\n                        \n                        if isActive {\n                            Text("ACTIVE")\n                                .font(DS.Typography.caption)\n                                .padding(.horizontal, DS.Spacing.xs)\n                                .padding(.vertical, 2)\n                                .background(DS.Colors.primary)\n                                .foregroundColor(.white)\n                                .cornerRadius(4)\n                        }\n                    }\n                    \n                    Text("Code: \\(team.code) • \\(team.league)")\n                        .font(DS.Typography.caption)\n                        .foregroundColor(DS.Colors.onSurfaceSecondary)\n                    \n                    if let rank = team.rank, let points = team.points {\n                        Text("Rank: #\\(rank) • \\(points) pts")\n                            .font(DS.Typography.caption)\n                            .foregroundColor(DS.Colors.onSurfaceSecondary)\n                    }\n                }\n                \n                Spacer()\n                \n                Menu {\n                    if !isActive {\n                        Button("Set as Active") {\n                            onSetActive()\n                        }\n                    }\n                    \n                    Button("Delete", role: .destructive) {\n                        showingDeleteConfirmation = true\n                    }\n                } label: {\n                    Image(systemName: "ellipsis")\n                        .foregroundColor(DS.Colors.onSurfaceSecondary)\n                        .padding(DS.Spacing.s)\n                }\n            }\n            .padding(DS.Spacing.m)\n            .background(DS.Colors.surface)\n            .cornerRadius(DS.Radius.medium)\n        }\n        .buttonStyle(PlainButtonStyle())\n        .confirmationDialog("Delete Team", isPresented: $showingDeleteConfirmation) {\n            Button("Delete", role: .destructive) {\n                onDelete()\n            }\n        } message: {\n            Text("Are you sure you want to delete \\\"\\(team.name)\\\"? This action cannot be undone.")\n        }\n    }\n}\n\n// MARK: - AddTeamManuallyView\n\nstruct AddTeamManuallyView: View {\n    let onTeamAdded: (String, String, String) -> Void\n    \n    @State private var teamName = ""\n    @State private var teamCode = ""\n    @State private var selectedLeague = "Classic"\n    @Environment(\\.presentationMode) var presentationMode\n    \n    private let leagues = ["Classic", "Draft", "H2H"]\n    \n    var body: some View {\n        NavigationView {\n            Form {\n                Section("Team Details") {\n                    TextField("Team Name", text: $teamName)\n                    TextField("Team Code", text: $teamCode)\n                        .textInputAutocapitalization(.characters)\n                        .autocorrectionDisabled()\n                }\n                \n                Section("League") {\n                    Picker("League Type", selection: $selectedLeague) {\n                        ForEach(leagues, id: \\.self) { league in\n                            Text(league).tag(league)\n                        }\n                    }\n                    .pickerStyle(SegmentedPickerStyle())\n                }\n                \n                Section {\n                    Button("Add Team") {\n                        onTeamAdded(teamName, teamCode, selectedLeague)\n                    }\n                    .disabled(teamName.isEmpty || teamCode.isEmpty)\n                }\n            }\n            .navigationTitle("Add Team")\n            .navigationBarTitleDisplayMode(.inline)\n            .toolbar {\n                ToolbarItem(placement: .cancellationAction) {\n                    Button("Cancel") {\n                        presentationMode.wrappedValue.dismiss()\n                    }\n                }\n            }\n        }\n    }\n}\n\n// MARK: - TeamDetailsView\n\nstruct TeamDetailsView: View {\n    let team: FantasyTeam\n    @Environment(\\.presentationMode) var presentationMode\n    \n    var body: some View {\n        NavigationView {\n            ScrollView {\n                VStack(alignment: .leading, spacing: DS.Spacing.l) {\n                    // Team Info\n                    VStack(alignment: .leading, spacing: DS.Spacing.s) {\n                        Text(team.name)\n                            .font(DS.Typography.largeTitle)\n                        \n                        Text("Code: \\(team.code)")\n                            .font(DS.Typography.body)\n                            .foregroundColor(DS.Colors.onSurfaceSecondary)\n                        \n                        Text("League: \\(team.league)")\n                            .font(DS.Typography.body)\n                            .foregroundColor(DS.Colors.onSurfaceSecondary)\n                    }\n                    \n                    // Stats\n                    if let rank = team.rank, let points = team.points {\n                        VStack(alignment: .leading, spacing: DS.Spacing.s) {\n                            Text("Statistics")\n                                .font(DS.Typography.headline)\n                            \n                            HStack {\n                                VStack(alignment: .leading) {\n                                    Text("Rank")\n                                        .font(DS.Typography.caption)\n                                        .foregroundColor(DS.Colors.onSurfaceSecondary)\n                                    Text("#\\(rank)")\n                                        .font(DS.Typography.title2)\n                                }\n                                \n                                Spacer()\n                                \n                                VStack(alignment: .trailing) {\n                                    Text("Points")\n                                        .font(DS.Typography.caption)\n                                        .foregroundColor(DS.Colors.onSurfaceSecondary)\n                                    Text("\\(points)")\n                                        .font(DS.Typography.title2)\n                                }\n                            }\n                        }\n                        .padding(DS.Spacing.m)\n                        .background(DS.Colors.surface)\n                        .cornerRadius(DS.Radius.medium)\n                    }\n                    \n                    // Players\n                    VStack(alignment: .leading, spacing: DS.Spacing.s) {\n                        Text("Players (\\(team.players.count))")\n                            .font(DS.Typography.headline)\n                        \n                        Text("Player management coming soon...")\n                            .font(DS.Typography.body)\n                            .foregroundColor(DS.Colors.onSurfaceSecondary)\n                            .italic()\n                    }\n                    .padding(DS.Spacing.m)\n                    .background(DS.Colors.surface)\n                    .cornerRadius(DS.Radius.medium)\n                }\n                .padding(DS.Spacing.m)\n            }\n            .navigationTitle("Team Details")\n            .navigationBarTitleDisplayMode(.inline)\n            .toolbar {\n                ToolbarItem(placement: .cancellationAction) {\n                    Button("Done") {\n                        presentationMode.wrappedValue.dismiss()\n                    }\n                }\n            }\n        }\n    }\n}\n\n// MARK: - Preview\n\n#if DEBUG\nstruct TeamsView_Previews: PreviewProvider {\n    static var previews: some View {\n        TeamsView()\n    }\n}\n#endif
