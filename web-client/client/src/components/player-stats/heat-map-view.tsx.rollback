import { useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { 
  LineChart, 
  Line, 
  XAxis, 
  YAxis, 
  ResponsiveContainer, 
  Tooltip,
  AreaChart,
  Area,
  Legend,
  CartesianGrid,
  ScatterChart,
  Scatter,
  ZAxis
} from "recharts";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Info } from "lucide-react";

// Sample data for DVP analysis
const dvpData = [
  { round: "R8", team: "GWS", dvp: 75, league: 55 },
  { round: "R9", team: "ESS", dvp: 45, league: 52 },
  { round: "R10", team: "GCS", dvp: 60, league: 58 },
  { round: "R11", team: "COL", dvp: 30, league: 50 },
  { round: "R12", team: "BRL", dvp: 70, league: 56 },
];

// Value data - price vs points per dollar
const valueData = [
  { name: "M. Bontempelli", price: 950000, ppd: 280, position: "MID", team: "WBD" },
  { name: "C. Oliver", price: 880000, ppd: 270, position: "MID", team: "MEL" },
  { name: "J. Macrae", price: 830000, ppd: 265, position: "MID", team: "WBD" },
  { name: "Z. Merrett", price: 920000, ppd: 260, position: "MID", team: "ESS" },
  { name: "S. Walsh", price: 850000, ppd: 255, position: "MID", team: "CAR" },
  { name: "N. Anderson", price: 440000, ppd: 330, position: "MID", team: "GCS" },
  { name: "T. Green", price: 380000, ppd: 320, position: "MID", team: "RIC" },
  { name: "D. Wilson", price: 410000, ppd: 310, position: "FWD", team: "GWS" },
  { name: "J. Ginnivan", price: 360000, ppd: 300, position: "FWD", team: "HAW" },
  { name: "J. Butts", price: 330000, ppd: 290, position: "DEF", team: "ESS" },
];

// Heatmap data - player disposals on the field
const heatmapData = [
  { x: 40, y: 30, value: 25, name: "M. Bontempelli" },
  { x: 30, y: 40, value: 21, name: "C. Oliver" },
  { x: 60, y: 45, value: 19, name: "J. Macrae" },
  { x: 45, y: 60, value: 18, name: "Z. Merrett" },
  { x: 55, y: 20, value: 16, name: "S. Walsh" },
  { x: 70, y: 35, value: 14, name: "L. Parker" },
  { x: 25, y: 55, value: 13, name: "A. Brayshaw" },
  { x: 35, y: 65, value: 12, name: "T. Mitchell" },
  { x: 65, y: 50, value: 11, name: "P. Cripps" },
  { x: 50, y: 70, value: 10, name: "N. Daicos" },
];

// Injury data
const injuryData = [
  { 
    player: "Patrick Dangerfield", 
    team: "Geelong", 
    position: "MID", 
    status: "Test", 
    injury: "Hamstring", 
    details: "Dangerfield suffered a hamstring strain in Round 6. Scans have revealed a low-grade strain, and the club is optimistic about a Round 8 return. He has resumed light training and will be a test for the upcoming match.",
    updated: "May 3, 2025"
  },
  { 
    player: "Marcus Bontempelli", 
    team: "Western Bulldogs", 
    position: "MID", 
    status: "Out (1-2 weeks)", 
    injury: "Knee", 
    details: "Bontempelli sustained a minor knee injury in the fourth quarter against Richmond. Scans confirmed a low-grade MCL sprain that will keep him sidelined for 1-2 weeks. Coach Luke Beveridge confirmed he won't be risked until fully recovered.",
    updated: "May 2, 2025"
  },
  { 
    player: "Isaac Heeney", 
    team: "Sydney", 
    position: "FWD/MID", 
    status: "Available", 
    injury: "Calf", 
    details: "Heeney has recovered from the calf tightness that saw him on limited minutes last week. He completed a full training session on Tuesday and has been cleared to play without restrictions in Round 8.",
    updated: "May 4, 2025"
  },
  { 
    player: "Nick Daicos", 
    team: "Collingwood", 
    position: "MID/DEF", 
    status: "Out (3-4 weeks)", 
    injury: "Collarbone", 
    details: "Daicos fractured his collarbone in a collision during the third quarter against West Coast. He underwent surgery on Monday, with the procedure deemed a success. Expected recovery timeline is 3-4 weeks before return to play.",
    updated: "May 1, 2025"
  },
  { 
    player: "Zach Merrett", 
    team: "Essendon", 
    position: "MID", 
    status: "Test", 
    injury: "Ankle", 
    details: "Merrett rolled his ankle at training but completed the session. He has responded well to treatment and will face a fitness test later in the week. Coach Brad Scott indicated they'll take a cautious approach given the short turnaround to the next game.",
    updated: "May 3, 2025"
  }
];

export default function HeatMapView() {
  const [selectedInjury, setSelectedInjury] = useState<any>(null);

  const CustomTooltip = ({ active, payload, label }: any) => {
    if (active && payload && payload.length) {
      return (
        <div className="bg-gray-800 border border-gray-700 text-white p-2 rounded-md text-xs">
          <p className="text-blue-400 font-bold">{label || payload[0]?.payload?.name}</p>
          {payload.map((entry: any, index: number) => (
            <p key={index} style={{ color: entry.color }}>
              {entry.name}: {entry.value}
            </p>
          ))}
        </div>
      );
    }
    return null;
  };

  const getColorClass = (dvp: number) => {
    if (dvp > 65) return { bg: 'bg-red-900/30', text: 'text-red-500' };
    if (dvp < 35) return { bg: 'bg-green-900/30', text: 'text-green-500' };
    return { bg: 'bg-orange-900/30', text: 'text-orange-500' };
  };

  const getStatusColor = (status: string) => {
    if (status.includes("Out")) return "text-red-500";
    if (status.includes("Test")) return "text-yellow-500";
    if (status.includes("Available")) return "text-green-500";
    return "text-gray-400";
  };

  return (
    <div className="space-y-4">
      {/* DVP Analysis Chart - Positions */}
      <Card className="bg-gray-900 border-gray-700 text-white overflow-hidden">
        <div className="p-3 border-b border-gray-700">
          <h3 className="text-lg font-bold text-blue-400">DEFENCE VS POSITION (DVP)</h3>
        </div>
        <CardContent className="px-3 pt-2 pb-4">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
              <div className="text-sm font-semibold text-gray-300 mb-2">DEFENDERS</div>
              <div className="h-[120px]">
                <ResponsiveContainer width="100%" height="100%">
                  <LineChart
                    data={dvpData}
                    margin={{ top: 5, right: 5, left: 0, bottom: 5 }}
                  >
                    <CartesianGrid stroke="#333" opacity={0.2} vertical={false} />
                    <XAxis 
                      dataKey="round" 
                      tick={{ fill: '#888', fontSize: 9 }}
                      axisLine={{ stroke: '#333' }}
                    />
                    <YAxis 
                      tick={{ fill: '#888', fontSize: 9 }}
                      axisLine={{ stroke: '#333' }}
                      tickLine={false}
                      domain={[0, 100]}
                    />
                    <Tooltip 
                      content={<CustomTooltip />}
                      cursor={{ stroke: '#555', strokeDasharray: '3 3' }}
                    />
                    <Line
                      name="Team DVP"
                      type="monotone"
                      dataKey="dvp"
                      stroke="#22c55e"
                      strokeWidth={2}
                      dot={{ fill: "#121212", stroke: "#22c55e", strokeWidth: 2, r: 3 }}
                      activeDot={{ r: 4, fill: "#22c55e" }}
                      style={{ filter: 'drop-shadow(0 0 6px rgba(34, 197, 94, 0.6))' }}
                    />
                  </LineChart>
                </ResponsiveContainer>
              </div>
            </div>
            
            <div>
              <div className="text-sm font-semibold text-gray-300 mb-2">MIDFIELDERS</div>
              <div className="h-[120px]">
                <ResponsiveContainer width="100%" height="100%">
                  <LineChart
                    data={[
                      { round: "R8", team: "GWS", dvp: 35, league: 55 },
                      { round: "R9", team: "ESS", dvp: 70, league: 52 },
                      { round: "R10", team: "GCS", dvp: 45, league: 58 },
                      { round: "R11", team: "COL", dvp: 65, league: 50 },
                      { round: "R12", team: "BRL", dvp: 30, league: 56 },
                    ]}
                    margin={{ top: 5, right: 5, left: 0, bottom: 5 }}
                  >
                    <CartesianGrid stroke="#333" opacity={0.2} vertical={false} />
                    <XAxis 
                      dataKey="round" 
                      tick={{ fill: '#888', fontSize: 9 }}
                      axisLine={{ stroke: '#333' }}
                    />
                    <YAxis 
                      tick={{ fill: '#888', fontSize: 9 }}
                      axisLine={{ stroke: '#333' }}
                      tickLine={false}
                      domain={[0, 100]}
                    />
                    <Tooltip 
                      content={<CustomTooltip />}
                      cursor={{ stroke: '#555', strokeDasharray: '3 3' }}
                    />
                    <Line
                      name="Team DVP"
                      type="monotone"
                      dataKey="dvp"
                      stroke="#ef4444"
                      strokeWidth={2}
                      dot={{ fill: "#121212", stroke: "#ef4444", strokeWidth: 2, r: 3 }}
                      activeDot={{ r: 4, fill: "#ef4444" }}
                      style={{ filter: 'drop-shadow(0 0 6px rgba(239, 68, 68, 0.6))' }}
                    />
                  </LineChart>
                </ResponsiveContainer>
              </div>
            </div>
            
            <div>
              <div className="text-sm font-semibold text-gray-300 mb-2">FORWARDS</div>
              <div className="h-[120px]">
                <ResponsiveContainer width="100%" height="100%">
                  <LineChart
                    data={[
                      { round: "R8", team: "GWS", dvp: 60, league: 55 },
                      { round: "R9", team: "ESS", dvp: 35, league: 52 },
                      { round: "R10", team: "GCS", dvp: 75, league: 58 },
                      { round: "R11", team: "COL", dvp: 40, league: 50 },
                      { round: "R12", team: "BRL", dvp: 65, league: 56 },
                    ]}
                    margin={{ top: 5, right: 5, left: 0, bottom: 5 }}
                  >
                    <CartesianGrid stroke="#333" opacity={0.2} vertical={false} />
                    <XAxis 
                      dataKey="round" 
                      tick={{ fill: '#888', fontSize: 9 }}
                      axisLine={{ stroke: '#333' }}
                    />
                    <YAxis 
                      tick={{ fill: '#888', fontSize: 9 }}
                      axisLine={{ stroke: '#333' }}
                      tickLine={false}
                      domain={[0, 100]}
                    />
                    <Tooltip 
                      content={<CustomTooltip />}
                      cursor={{ stroke: '#555', strokeDasharray: '3 3' }}
                    />
                    <Line
                      name="Team DVP"
                      type="monotone"
                      dataKey="dvp"
                      stroke="#f59e0b"
                      strokeWidth={2}
                      dot={{ fill: "#121212", stroke: "#f59e0b", strokeWidth: 2, r: 3 }}
                      activeDot={{ r: 4, fill: "#f59e0b" }}
                      style={{ filter: 'drop-shadow(0 0 6px rgba(245, 158, 11, 0.6))' }}
                    />
                  </LineChart>
                </ResponsiveContainer>
              </div>
            </div>
            
            <div>
              <div className="text-sm font-semibold text-gray-300 mb-2">RUCKS</div>
              <div className="h-[120px]">
                <ResponsiveContainer width="100%" height="100%">
                  <LineChart
                    data={[
                      { round: "R8", team: "GWS", dvp: 25, league: 55 },
                      { round: "R9", team: "ESS", dvp: 40, league: 52 },
                      { round: "R10", team: "GCS", dvp: 55, league: 58 },
                      { round: "R11", team: "COL", dvp: 80, league: 50 },
                      { round: "R12", team: "BRL", dvp: 45, league: 56 },
                    ]}
                    margin={{ top: 5, right: 5, left: 0, bottom: 5 }}
                  >
                    <CartesianGrid stroke="#333" opacity={0.2} vertical={false} />
                    <XAxis 
                      dataKey="round" 
                      tick={{ fill: '#888', fontSize: 9 }}
                      axisLine={{ stroke: '#333' }}
                    />
                    <YAxis 
                      tick={{ fill: '#888', fontSize: 9 }}
                      axisLine={{ stroke: '#333' }}
                      tickLine={false}
                      domain={[0, 100]}
                    />
                    <Tooltip 
                      content={<CustomTooltip />}
                      cursor={{ stroke: '#555', strokeDasharray: '3 3' }}
                    />
                    <Line
                      name="Team DVP"
                      type="monotone"
                      dataKey="dvp"
                      stroke="#8b5cf6"
                      strokeWidth={2}
                      dot={{ fill: "#121212", stroke: "#8b5cf6", strokeWidth: 2, r: 3 }}
                      activeDot={{ r: 4, fill: "#8b5cf6" }}
                      style={{ filter: 'drop-shadow(0 0 6px rgba(139, 92, 246, 0.6))' }}
                    />
                  </LineChart>
                </ResponsiveContainer>
              </div>
            </div>
          </div>
          
          <div className="grid grid-cols-4 gap-x-2 gap-y-2 mt-4">
            <div className="text-center text-xs text-gray-400 font-bold">NEXT MATCH</div>
            <div className="text-center text-xs text-gray-400 font-bold">DIFFICULTY</div>
            <div className="text-center text-xs text-gray-400 font-bold">DVP</div>
            <div className="text-center text-xs text-gray-400 font-bold">TREND</div>
            
            <div className="text-center text-white text-sm font-bold">GWS</div>
            <div className="text-center text-red-500 text-sm font-bold">Hard</div>
            <div className="text-center text-white text-sm font-bold">75</div>
            <div className="text-center text-red-500 text-sm font-bold">↑</div>
          </div>
        </CardContent>
      </Card>
      
      {/* Player Value Analysis */}
      <Card className="bg-gray-900 border-gray-700 text-white overflow-hidden">
        <div className="p-3 border-b border-gray-700">
          <h3 className="text-lg font-bold text-blue-400">PLAYER VALUE ANALYSIS</h3>
        </div>
        <CardContent className="p-4">
          <div className="h-[300px]">
            <ResponsiveContainer width="100%" height="100%">
              <ScatterChart
                margin={{ top: 20, right: 20, bottom: 20, left: 20 }}
              >
                <CartesianGrid strokeDasharray="3 3" stroke="#333" />
                <XAxis 
                  type="number" 
                  dataKey="price" 
                  name="Price"
                  tick={{ fill: '#888' }}
                  axisLine={{ stroke: '#333' }}
                  domain={[300000, 1000000]}
                  tickFormatter={(value) => `$${value/1000}k`}
                  label={{ value: 'Player Price', position: 'bottom', fill: '#888' }}
                />
                <YAxis 
                  type="number" 
                  dataKey="ppd" 
                  name="Points Per $1000"
                  tick={{ fill: '#888' }}
                  axisLine={{ stroke: '#333' }}
                  domain={[250, 350]}
                  label={{ value: 'Points Per $1000', angle: -90, position: 'left', fill: '#888' }}
                />
                <ZAxis 
                  type="number" 
                  range={[100, 500]} 
                  name="value"
                />
                <Tooltip content={<CustomTooltip />} />
                <Scatter 
                  name="DEF" 
                  data={valueData.filter(player => player.position === "DEF")} 
                  fill="#22c55e"
                  stroke="#111827"
                  strokeWidth={1}
                  style={{ filter: 'drop-shadow(0 0 4px rgba(34, 197, 94, 0.6))' }}
                />
                <Scatter 
                  name="MID" 
                  data={valueData.filter(player => player.position === "MID")} 
                  fill="#ef4444"
                  stroke="#111827"
                  strokeWidth={1}
                  style={{ filter: 'drop-shadow(0 0 4px rgba(239, 68, 68, 0.6))' }}
                />
                <Scatter 
                  name="FWD" 
                  data={valueData.filter(player => player.position === "FWD")} 
                  fill="#f59e0b"
                  stroke="#111827"
                  strokeWidth={1}
                  style={{ filter: 'drop-shadow(0 0 4px rgba(245, 158, 11, 0.6))' }}
                />
                <Legend />
              </ScatterChart>
            </ResponsiveContainer>
          </div>
          
          <div className="grid grid-cols-2 gap-4 mt-4">
            <div className="bg-gray-800/50 p-3 rounded-lg border border-gray-700">
              <div className="text-sm font-semibold text-gray-300 mb-1">BEST VALUE</div>
              <div className="grid grid-cols-2 gap-2">
                <div className="flex items-center">
                  <div className="w-3 h-3 rounded-full bg-green-500 mr-2"></div>
                  <div className="text-green-400 font-mono">$380k</div>
                </div>
                <div className="font-semibold text-white">T. Green</div>
                <div className="font-medium text-green-400">320 pts/$k</div>
                <div className="text-xs text-gray-400">Mid | RIC</div>
              </div>
            </div>
            
            <div className="bg-gray-800/50 p-3 rounded-lg border border-gray-700">
              <div className="text-sm font-semibold text-gray-300 mb-1">PREMIUM VALUE</div>
              <div className="grid grid-cols-2 gap-2">
                <div className="flex items-center">
                  <div className="w-3 h-3 rounded-full bg-red-500 mr-2"></div>
                  <div className="text-red-400 font-mono">$830k</div>
                </div>
                <div className="font-semibold text-white">J. Macrae</div>
                <div className="font-medium text-red-400">265 pts/$k</div>
                <div className="text-xs text-gray-400">Mid | WBD</div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
      
      {/* Heatmap */}
      <Card className="bg-gray-900 border-gray-700 text-white overflow-hidden">
        <div className="p-3 border-b border-gray-700">
          <h3 className="text-lg font-bold text-blue-400">DISPOSAL HEATMAP</h3>
        </div>
        <CardContent className="p-4">
          <div className="relative w-full h-[300px]">
            {/* AFL Field Oval */}
            <div className="absolute inset-0 flex items-center justify-center">
              <div className="relative w-[90%] h-[80%]">
                {/* Oval field outline */}
                <div className="absolute inset-0 border-2 border-gray-600 rounded-[100%]"></div>
                
                {/* Center line and circle */}
                <div className="absolute top-0 left-1/2 w-0.5 h-full bg-gray-600 -translate-x-1/2"></div>
                <div className="absolute top-1/2 left-1/2 w-20 h-20 -ml-10 -mt-10 border-2 border-gray-600 rounded-full"></div>
                
                {/* 50m arcs */}
                <div className="absolute top-1/4 left-1/2 w-[60%] h-[50%] -ml-[30%] -mt-[25%] border-b-2 border-gray-600 rounded-[100%]"></div>
                <div className="absolute bottom-1/4 left-1/2 w-[60%] h-[50%] -ml-[30%] -mb-[25%] border-t-2 border-gray-600 rounded-[100%]"></div>
                
                {/* Heat points */}
                {heatmapData.map((point, index) => (
                  <div 
                    key={index}
                    className="absolute flex items-center justify-center"
                    style={{
                      left: `${point.x}%`,
                      top: `${point.y}%`,
                      width: point.value * 1.2,
                      height: point.value * 1.2,
                      borderRadius: '50%',
                      backgroundColor: `rgba(52, 211, 153, ${0.1 + point.value / 50})`,
                      boxShadow: `0 0 ${point.value / 2}px rgba(52, 211, 153, 0.6)`,
                      transform: 'translate(-50%, -50%)',
                      zIndex: Math.floor(point.value)
                    }}
                  >
                    <div className="text-xs font-semibold text-white opacity-80">
                      {point.value}
                    </div>
                  </div>
                ))}
              </div>
            </div>
            
            {/* Legend */}
            <div className="absolute bottom-2 right-2 bg-gray-800/70 p-2 rounded-md">
              <div className="text-xs text-gray-300 mb-1">Disposal Intensity</div>
              <div className="flex items-center space-x-3">
                <div className="flex items-center">
                  <div className="w-3 h-3 rounded-full bg-emerald-800"></div>
                  <div className="ml-1 text-xs text-gray-400">Low</div>
                </div>
                <div className="flex items-center">
                  <div className="w-3 h-3 rounded-full bg-emerald-600"></div>
                  <div className="ml-1 text-xs text-gray-400">Med</div>
                </div>
                <div className="flex items-center">
                  <div className="w-3 h-3 rounded-full bg-emerald-400"></div>
                  <div className="ml-1 text-xs text-gray-400">High</div>
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
      
      {/* Injury Updates */}
      <Card className="bg-gray-900 border-gray-700 text-white overflow-hidden">
        <div className="p-3 border-b border-gray-700">
          <h3 className="text-lg font-bold text-blue-400">INJURY UPDATES</h3>
          <div className="text-xs text-gray-400 mt-1">Click on player name for detailed injury report</div>
        </div>
        <CardContent className="p-0">
          <div className="divide-y divide-gray-800">
            {injuryData.map((injury, index) => (
              <div key={index} className="p-3 hover:bg-gray-800/50">
                <div className="flex justify-between items-center">
                  <div>
                    <Dialog>
                      <DialogTrigger asChild>
                        <button className="text-white font-semibold hover:text-blue-400 transition-colors flex items-center">
                          {injury.player}
                          <Info className="ml-1 h-3 w-3 text-gray-400" />
                        </button>
                      </DialogTrigger>
                      <DialogContent className="bg-gray-900 border-gray-700 text-white">
                        <DialogHeader>
                          <DialogTitle className="text-blue-400">{injury.player} | {injury.team}</DialogTitle>
                          <DialogDescription className="text-gray-400">
                            <span className={getStatusColor(injury.status)}>{injury.status}</span> - {injury.injury}
                          </DialogDescription>
                        </DialogHeader>
                        <div className="mt-2 space-y-2">
                          <div className="text-sm">{injury.details}</div>
                          <div className="text-xs text-gray-400">Last updated: {injury.updated}</div>
                        </div>
                      </DialogContent>
                    </Dialog>
                    <div className="text-xs text-gray-400">{injury.team} | {injury.position}</div>
                  </div>
                  <div>
                    <div className={`text-sm font-semibold ${getStatusColor(injury.status)}`}>
                      {injury.status}
                    </div>
                    <div className="text-xs text-gray-400 text-right">{injury.injury}</div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}