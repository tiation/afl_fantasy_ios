//
// PlayersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

// MARK: - PlayersAPI

open class PlayersAPI {
    /**
     Get single player

     - parameter playerId: (path) Unique identifier for the player
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPlayerById(playerId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SinglePlayerResponse?, _ error: Error?) -> Void)) -> RequestTask {
        getPlayerByIdWithRequestBuilder(playerId: playerId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get single player
     - GET /v1/players/{playerId}
     - Get detailed information for a specific player including statistics, fixtures, injury status, and form data.
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - parameter playerId: (path) Unique identifier for the player
     - returns: RequestBuilder<SinglePlayerResponse>
     */
    open class func getPlayerByIdWithRequestBuilder(playerId: Int) -> RequestBuilder<SinglePlayerResponse> {
        var localVariablePath = "/v1/players/{playerId}"
        let playerIdPreEscape = "\(APIHelper.mapValueToPathItem(playerId))"
        let playerIdPostEscape = playerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{playerId}", with: playerIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SinglePlayerResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter position
     */
    public enum Position_getPlayers: String, CaseIterable {
        case def = "DEF"
        case mid = "MID"
        case ruc = "RUC"
        case fwd = "FWD"
    }

    /**
     List all players

     - parameter position: (query) Filter players by position (DEF, MID, RUC, FWD) (optional)
     - parameter season: (query) Season year to filter by (optional)
     - parameter limit: (query) Maximum number of players to return (optional, default to 100)
     - parameter offset: (query) Number of players to skip for pagination (optional, default to 0)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPlayers(position: Position_getPlayers? = nil, season: Int? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PlayersResponse?, _ error: Error?) -> Void)) -> RequestTask {
        getPlayersWithRequestBuilder(position: position, season: season, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List all players
     - GET /v1/players
     - Get a list of all AFL Fantasy players with optional filtering by position and season. Returns player statistics including price, average score, ownership percentage.
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - parameter position: (query) Filter players by position (DEF, MID, RUC, FWD) (optional)
     - parameter season: (query) Season year to filter by (optional)
     - parameter limit: (query) Maximum number of players to return (optional, default to 100)
     - parameter offset: (query) Number of players to skip for pagination (optional, default to 0)
     - returns: RequestBuilder<PlayersResponse>
     */
    open class func getPlayersWithRequestBuilder(position: Position_getPlayers? = nil, season: Int? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PlayersResponse> {
        let localVariablePath = "/v1/players"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "position": (wrappedValue: position?.encodeToJSON(), isExplode: true),
            "season": (wrappedValue: season?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PlayersResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
