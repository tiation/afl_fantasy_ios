name: afl-fantasy-platform

services:
  # Frontend service - React UI
  frontend:
    build:
      context: ../web-client/client
      dockerfile: ../../infra/Dockerfile.frontend
      target: development
    image: afl-fantasy/frontend:latest
    profiles: ["default", "frontend", "dev", "all"]
    ports:
      - "${PORT:-5173}:${PORT:-5173}"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=${PORT:-5173}
      - API_URL=http://backend:${API_PORT:-4000}
      - VITE_API_URL=/api
      - VITE_WEBSOCKET_URL=ws://localhost:${API_PORT:-4000}/ws
    volumes:
      - ../web-client/client:/app
      - frontend_node_modules:/app/node_modules
      - ../logs:/app/logs
    depends_on:
      - backend
    networks:
      - afl-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT:-5173}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    command: npm run dev

  # Backend service - Express API
  backend:
    build:
      context: ../server-node
      dockerfile: ../infra/Dockerfile
      target: development
    image: afl-fantasy/backend:latest
    profiles: ["default", "backend", "dev", "all"]
    ports:
      - "${API_PORT:-4000}:${API_PORT:-4000}"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=${API_PORT:-4000}
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD:-password}@postgres:5432/${DB_NAME:-afl_fantasy}
      - REDIS_URL=redis://redis:6379
      - PYTHON_SERVICE_URL=http://python_ai:8080
      - PYTHON_SCRAPER_URL=http://python_scraper:9001
      - SESSION_SECRET=${SESSION_SECRET:-devmode_session_secret}
      - JWT_SECRET=${JWT_SECRET:-devmode_jwt_secret}
      - ENABLE_AI_PREDICTIONS=${ENABLE_AI_PREDICTIONS:-true}
      - ENABLE_REAL_TIME_UPDATES=${ENABLE_REAL_TIME_UPDATES:-true}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - ../server-node:/app
      - backend_node_modules:/app/node_modules
      - ../logs:/app/logs
      - ../data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      python_ai:
        condition: service_started
    networks:
      - afl-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${API_PORT:-4000}/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Python AI service - Machine learning and predictions
  python_ai:
    build:
      context: ../server-python
      dockerfile: ../infra/Dockerfile.python
    image: afl-fantasy/python-ai:latest
    profiles: ["default", "python", "dev", "all"]
    ports:
      - "${PYTHON_AI_PORT:-8080}:8080"
    environment:
      - FLASK_ENV=${NODE_ENV:-development}
      - FLASK_DEBUG=${FLASK_DEBUG:-true}
      - FLASK_PORT=8080
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD:-password}@postgres:5432/${DB_NAME:-afl_fantasy}
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - GEMINI_API_KEY=${GEMINI_API_KEY:-}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - ../server-python:/app
      - ../logs:/app/logs
      - ../data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - afl-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 30s
    command: python main.py --serve --port 8080

  # Python scraper service - Data collection and processing
  python_scraper:
    build:
      context: ../server-python/scrapers
      dockerfile: ../../infra/Dockerfile.scraper
    image: afl-fantasy/python-scraper:latest
    profiles: ["default", "python", "dev", "all"]
    ports:
      - "${PYTHON_SCRAPER_PORT:-9001}:9001"
    environment:
      - FLASK_ENV=${NODE_ENV:-development}
      - FLASK_DEBUG=${FLASK_DEBUG:-true}
      - FLASK_PORT=9001
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD:-password}@postgres:5432/${DB_NAME:-afl_fantasy}
      - REDIS_URL=redis://redis:6379
      - AFL_FANTASY_TEAM_ID=${AFL_FANTASY_TEAM_ID:-}
      - AFL_FANTASY_SESSION_COOKIE=${AFL_FANTASY_SESSION_COOKIE:-}
      - AFL_FANTASY_API_TOKEN=${AFL_FANTASY_API_TOKEN:-}
      - SCRAPER_TIMEOUT=${SCRAPER_TIMEOUT:-120}
      - SCRAPER_USER_AGENT=${SCRAPER_USER_AGENT:-"Mozilla/5.0"}
      - DFS_AUSTRALIA_API_KEY=${DFS_AUSTRALIA_API_KEY:-}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - ../logs:/app/logs
      - ../data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - afl-network
    restart: "no"
    command: python scrapers/sync_players.py

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    profiles: ["default", "database", "dev", "all"]
    environment:
      - POSTGRES_DB=${DB_NAME:-afl_fantasy}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-password}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ../data/backups:/backups
    networks:
      - afl-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-afl_fantasy}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: ${POSTGRES_MEMORY_LIMIT:-512M}
        reservations:
          memory: 256M

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    profiles: ["default", "database", "dev", "all"]
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - afl-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    deploy:
      resources:
        limits:
          memory: ${REDIS_MEMORY_LIMIT:-256M}

  # Status dashboard service
  status_dashboard:
    image: nginx:alpine
    profiles: ["default", "monitoring", "all"]
    ports:
      - "${STATUS_DASHBOARD_PORT:-8090}:80"
    volumes:
      - ../web-client/dashboards/dashboard.html:/usr/share/nginx/html/index.html:ro
      - ../status.json:/usr/share/nginx/html/status.json:ro
      - ./nginx.dashboard.conf:/etc/nginx/conf.d/default.conf:ro
      - ../data/assets:/usr/share/nginx/html/assets:ro
    networks:
      - afl-network
    restart: unless-stopped
    depends_on:
      - backend
      - frontend
      
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    profiles: ["monitoring", "all"]
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - afl-network
    restart: unless-stopped
    depends_on:
      - backend

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    profiles: ["monitoring", "all"]
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - afl-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Loki for log aggregation
  loki:
    image: grafana/loki:latest
    profiles: ["logging", "all"]
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - afl-network
    restart: unless-stopped

  # Promtail for log shipping
  promtail:
    image: grafana/promtail:latest
    profiles: ["logging", "all"]
    volumes:
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
      - ./logs:/var/log/afl-fantasy
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    networks:
      - afl-network
    restart: unless-stopped
    depends_on:
      - loki

  # iOS Simulator helper - only active with 'ios' profile
  ios_helper:
    image: litehelpers/ios-webkit-debug-proxy:latest
    profiles: ["ios"]
    network_mode: "host"
    ports:
      - "27753:27753"
      - "9221:9221"
    volumes:
      - /var/run/usbmuxd:/var/run/usbmuxd
    restart: unless-stopped
    command: ios_webkit_debug_proxy -c null:27753 --no-frontend

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  frontend_node_modules:
    driver: local
  backend_node_modules:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
    
networks:
  afl-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
