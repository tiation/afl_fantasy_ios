//
// PlayerDetail.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

// MARK: - PlayerDetail

public struct PlayerDetail: Codable, JSONEncodable, Hashable {
    public enum Position: String, Codable, CaseIterable {
        case def = "DEF"
        case mid = "MID"
        case ruc = "RUC"
        case fwd = "FWD"
    }

    /** Unique player identifier */
    public var id: Int
    /** Player full name */
    public var name: String
    /** AFL team name */
    public var team: String
    /** Playing position */
    public var position: Position
    /** Current player price in cents */
    public var price: Int
    /** Season average fantasy score */
    public var avg: Float
    /** Most recent fantasy score */
    public var lastScore: Int?
    /** Ownership percentage */
    public var ownership: Float?
    /** Breakeven score needed for price rise */
    public var breakeven: Int?
    /** Current form rating */
    public var form: String?
    /** Injury status */
    public var injury: String?
    public var stats: PlayerStats?
    public var fixtures: [Fixture]?

    public init(id: Int, name: String, team: String, position: Position, price: Int, avg: Float, lastScore: Int? = nil, ownership: Float? = nil, breakeven: Int? = nil, form: String? = nil, injury: String? = nil, stats: PlayerStats? = nil, fixtures: [Fixture]? = nil) {
        self.id = id
        self.name = name
        self.team = team
        self.position = position
        self.price = price
        self.avg = avg
        self.lastScore = lastScore
        self.ownership = ownership
        self.breakeven = breakeven
        self.form = form
        self.injury = injury
        self.stats = stats
        self.fixtures = fixtures
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case team
        case position
        case price
        case avg
        case lastScore
        case ownership
        case breakeven
        case form
        case injury
        case stats
        case fixtures
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(name, forKey: .name)
        try container.encode(team, forKey: .team)
        try container.encode(position, forKey: .position)
        try container.encode(price, forKey: .price)
        try container.encode(avg, forKey: .avg)
        try container.encodeIfPresent(lastScore, forKey: .lastScore)
        try container.encodeIfPresent(ownership, forKey: .ownership)
        try container.encodeIfPresent(breakeven, forKey: .breakeven)
        try container.encodeIfPresent(form, forKey: .form)
        try container.encodeIfPresent(injury, forKey: .injury)
        try container.encodeIfPresent(stats, forKey: .stats)
        try container.encodeIfPresent(fixtures, forKey: .fixtures)
    }
}

// MARK: Identifiable

@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension PlayerDetail: Identifiable {}
